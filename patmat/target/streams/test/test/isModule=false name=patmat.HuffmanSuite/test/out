[0m[[0minfo[0m] [0m[32mHuffmanSuite:[0m[0m
[0m[[0minfo[0m] [0m[32m- weight of a larger tree[0m[0m
[0m[[0minfo[0m] [0m[32m- chars of a larger tree[0m[0m
[0m[[0minfo[0m] [0m[32m- string2chars("hello, world")[0m[0m
[0m[[0minfo[0m] [0m[32m- times(List('h', 'e', 'l', 'l', 'o'))[0m[0m
[0m[[0minfo[0m] [0m[32m- times(aaaaabbbbbccccceeeee)[0m[0m
[0m[[0minfo[0m] [0m[32m- makeOrderedLeafList for some frequency table[0m[0m
[0m[[0minfo[0m] [0m[32m- singleton list:List(Leaf('e', 1)[0m[0m
[0m[[0minfo[0m] [0m[32m- not a singleton list:List(Leaf('e', 1), Leaf('t', 2), Leaf('x', 4))[0m[0m
[0m[[0minfo[0m] [0m[32m- combine of some leaf list[0m[0m
[0m[[0minfo[0m] [0m[31m- combine of some leaf list with duplicates *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  List(Fork(Leaf(e,1),Leaf(t,2),List(e, t),3), Leaf(x,4), Leaf(e,5), Leaf(x,1), Leaf(t,10)) did not equal List(Fork(Leaf(x,4),Leaf(e,5),List(x, e),9), Leaf(t,10)) (HuffmanSuite.scala:68)[0m[0m
[0m[[0minfo[0m] [0m[32m- combine of some fork list[0m[0m
[0m[[0minfo[0m] [0m[32m- combine only two elements[0m[0m
[0m[[0minfo[0m] [0m[32m- combine of some fork and leaf list[0m[0m
[0m[[0minfo[0m] [0m[32m- createCodeTree: hello[0m[0m
[0m[[0minfo[0m] [0m[32m- decode: hello[0m[0m
[0m[[0minfo[0m] [0m[32m- french secret[0m[0m
[0m[[0minfo[0m] [0m[32m- encode: hello[0m[0m
[0m[[0minfo[0m] [0m[32m- decode and encode a very short text should be identity[0m[0m
[0m[[0minfo[0m] [0m[32m- decode and encode french secret[0m[0m
[0m[[0minfo[0m] [0m[32m- codeBits[0m[0m
[0m[[0minfo[0m] [0m[32m- mergeCodeTables[0m[0m
[0m[[0minfo[0m] [0m[32m- convert to codeTable[0m[0m
[0m[[0minfo[0m] [0m[32m- quickDecode[0m[0m
